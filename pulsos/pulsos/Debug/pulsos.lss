
pulsos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000911  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035a  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  78:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
*/
int calculaTempo(int distancia, int velocidade)
{
	int variacaoDeTempo = (distancia*1000*3.6)/velocidade;
	return variacaoDeTempo;
}
  80:	18 16       	cp	r1, r24
  82:	19 06       	cpc	r1, r25
  84:	6c f4       	brge	.+26     	; 0xa0 <delay_ms+0x20>
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	ef ec       	ldi	r30, 0xCF	; 207
  8c:	f7 e0       	ldi	r31, 0x07	; 7
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delay_ms+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <delay_ms+0x14>
  94:	00 00       	nop
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	a9 f7       	brne	.-22     	; 0x8a <delay_ms+0xa>
  a0:	08 95       	ret

000000a2 <criaPulso>:
/*
*Entrada: número da porta em que haverá pulso
*/
void criaPulso(int numeroDaPorta)
{
	PORTB |= (1 << numeroDaPorta);
  a2:	45 b1       	in	r20, 0x05	; 5
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <criaPulso+0xe>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <criaPulso+0xa>
  b4:	cb 01       	movw	r24, r22
  b6:	46 2b       	or	r20, r22
  b8:	45 b9       	out	0x05, r20	; 5
	PORTB &= ~(1 << numeroDaPorta);
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	80 95       	com	r24
  be:	89 23       	and	r24, r25
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	08 95       	ret

000000c4 <enviaPulsos>:

/*
*Entrada: variação do tempo em milissegundos
*/
void enviaPulsos(int variacaoDeTempo)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
	criaPulso(0); //Pulso na porta B0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <criaPulso>
	delay_ms(variacaoDeTempo); //Espera tempo em ms
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
	criaPulso(1); //Pulso na porta B1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 51 00 	call	0xa2	; 0xa2 <criaPulso>
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <__vector_1>:

ISR(INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	enviaPulsos(calculaTempo(5, 50));
 108:	88 e6       	ldi	r24, 0x68	; 104
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 62 00 	call	0xc4	; 0xc4 <enviaPulsos>
	delay_ms(1000);
 110:	88 ee       	ldi	r24, 0xE8	; 232
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
	enviaPulsos(calculaTempo(5, 100));
 118:	84 eb       	ldi	r24, 0xB4	; 180
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 62 00 	call	0xc4	; 0xc4 <enviaPulsos>
	delay_ms(1000);
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
	enviaPulsos(calculaTempo(5, 65));
 128:	84 e1       	ldi	r24, 0x14	; 20
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 62 00 	call	0xc4	; 0xc4 <enviaPulsos>
	delay_ms(1000);
 130:	88 ee       	ldi	r24, 0xE8	; 232
 132:	93 e0       	ldi	r25, 0x03	; 3
 134:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
	enviaPulsos(calculaTempo(5, 120));
 138:	86 e9       	ldi	r24, 0x96	; 150
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <enviaPulsos>
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <main>:

int main(void)
{
	DDRB = 0xff;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 166:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
 168:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0c;
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (1 << ISC01);		//Ativa registrador interrupção externa
 16e:	e9 e6       	ldi	r30, 0x69	; 105
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);		//Ativa interrupção de int0
 178:	e8 9a       	sbi	0x1d, 0	; 29
	
	sei();
 17a:	78 94       	sei
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x1a>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
