
4-dig-7-seg-botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000794  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000369  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024c  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	65 00       	.word	0x0065	; ????
  6a:	68 00       	.word	0x0068	; ????
  6c:	6b 00       	.word	0x006b	; ????
  6e:	6e 00       	.word	0x006e	; ????
  70:	71 00       	.word	0x0071	; ????
  72:	74 00       	.word	0x0074	; ????
  74:	77 00       	.word	0x0077	; ????
  76:	7a 00       	.word	0x007a	; ????
  78:	7d 00       	.word	0x007d	; ????
  7a:	80 00       	.word	0x0080	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e9       	ldi	r30, 0x92	; 146
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 30       	cpi	r26, 0x0C	; 12
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  b2:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mostraNumeroNoDisplay>:
* Mostra número no display (PORT D)
* Parâmetros: int numero -> numero de 0 a 9 a ser exibido
*/
void mostraNumeroNoDisplay(int numero)
{
	switch(numero)
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	91 05       	cpc	r25, r1
  be:	10 f5       	brcc	.+68     	; 0x104 <mostraNumeroNoDisplay+0x4a>
  c0:	fc 01       	movw	r30, r24
  c2:	ec 5c       	subi	r30, 0xCC	; 204
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__tablejump2__>
	{
		case 0:
			PORTD = ZERO;
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	8b b9       	out	0x0b, r24	; 11
			break;
  ce:	08 95       	ret
		case 1:
			PORTD = UM;
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	8b b9       	out	0x0b, r24	; 11
			break;
  d4:	08 95       	ret
		case 2:
			PORTD = DOIS;
  d6:	8b e5       	ldi	r24, 0x5B	; 91
  d8:	8b b9       	out	0x0b, r24	; 11
			break;
  da:	08 95       	ret
		case 3:
			PORTD = TRES;
  dc:	8f e4       	ldi	r24, 0x4F	; 79
  de:	8b b9       	out	0x0b, r24	; 11
			break;
  e0:	08 95       	ret
		case 4:
			PORTD = QUATRO;
  e2:	86 e6       	ldi	r24, 0x66	; 102
  e4:	8b b9       	out	0x0b, r24	; 11
			break;
  e6:	08 95       	ret
		case 5:
			PORTD = CINCO;
  e8:	8d e6       	ldi	r24, 0x6D	; 109
  ea:	8b b9       	out	0x0b, r24	; 11
			break;
  ec:	08 95       	ret
		case 6:
			PORTD = SEIS;
  ee:	8d e7       	ldi	r24, 0x7D	; 125
  f0:	8b b9       	out	0x0b, r24	; 11
			break;
  f2:	08 95       	ret
		case 7:
			PORTD = SETE;
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	8b b9       	out	0x0b, r24	; 11
			break;
  f8:	08 95       	ret
		case 8:
			PORTD = OITO;
  fa:	8f e7       	ldi	r24, 0x7F	; 127
  fc:	8b b9       	out	0x0b, r24	; 11
			break;
  fe:	08 95       	ret
		case 9:
			PORTD = NOVE;
 100:	87 e6       	ldi	r24, 0x67	; 103
 102:	8b b9       	out	0x0b, r24	; 11
 104:	08 95       	ret

00000106 <__vector_5>:

/**
*
*/
ISR(PCINT2_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	if (BOTAO_ATIVADO)
 114:	4f 9b       	sbis	0x09, 7	; 9
 116:	09 c0       	rjmp	.+18     	; 0x12a <__vector_5+0x24>
	{
		numeroASerExibido++;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <liga_desliga_display>:
* Liga e desliga um display de 7 seg
*/
void liga_desliga_display()
{
	static int j = 0;
	(j==4)?j=0:j++;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 13c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	91 05       	cpc	r25, r1
 144:	29 f4       	brne	.+10     	; 0x150 <liga_desliga_display+0x18>
 146:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 14e:	05 c0       	rjmp	.+10     	; 0x15a <liga_desliga_display+0x22>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	PORTB &=(0b11110000); //Ativa display na porta j
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<j);
 160:	25 b1       	in	r18, 0x05	; 5
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 16a:	02 c0       	rjmp	.+4      	; 0x170 <liga_desliga_display+0x38>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <liga_desliga_display+0x34>
 174:	82 2b       	or	r24, r18
 176:	85 b9       	out	0x05, r24	; 5
	mostraNumeroNoDisplay(digitos[j]);
 178:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 17c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ec 5f       	subi	r30, 0xFC	; 252
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	0e 94 5d 00 	call	0xba	; 0xba <mostraNumeroNoDisplay>
 190:	08 95       	ret

00000192 <guardaDigitos>:
/**
*	Guarda os dígitos na lista digitos[4]
*	Parâmetros: int numero -> número a ser exibido no display
*/
void guardaDigitos(int numero)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	if(numero > 9999) numeroASerExibido=0;
 196:	80 31       	cpi	r24, 0x10	; 16
 198:	27 e2       	ldi	r18, 0x27	; 39
 19a:	92 07       	cpc	r25, r18
 19c:	24 f0       	brlt	.+8      	; 0x1a6 <guardaDigitos+0x14>
 19e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 	int i = 0;
	while(numero)
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	c1 f0       	breq	.+48     	; 0x1da <guardaDigitos+0x48>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		digitos[i] = numero%10;
 1ae:	ca e0       	ldi	r28, 0x0A	; 10
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	be 01       	movw	r22, r28
 1b4:	0e 94 19 01 	call	0x232	; 0x232 <__divmodhi4>
 1b8:	f9 01       	movw	r30, r18
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	ec 5f       	subi	r30, 0xFC	; 252
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	91 83       	std	Z+1, r25	; 0x01
 1c4:	80 83       	st	Z, r24
		i++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
		numero = numero/10;
 1ca:	86 2f       	mov	r24, r22
 1cc:	97 2f       	mov	r25, r23
*/
void guardaDigitos(int numero)
{
	if(numero > 9999) numeroASerExibido=0;
 	int i = 0;
	while(numero)
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	81 f7       	brne	.-32     	; 0x1b2 <guardaDigitos+0x20>
	{
		digitos[i] = numero%10;
		i++;
		numero = numero/10;
	}
	for (int j=i; j<4; j++) digitos[j] = 0;
 1d2:	24 30       	cpi	r18, 0x04	; 4
 1d4:	31 05       	cpc	r19, r1
 1d6:	1c f0       	brlt	.+6      	; 0x1de <guardaDigitos+0x4c>
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <guardaDigitos+0x64>
*/
void guardaDigitos(int numero)
{
	if(numero > 9999) numeroASerExibido=0;
 	int i = 0;
	while(numero)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
	{
		digitos[i] = numero%10;
		i++;
		numero = numero/10;
	}
	for (int j=i; j<4; j++) digitos[j] = 0;
 1de:	f9 01       	movw	r30, r18
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ec 5f       	subi	r30, 0xFC	; 252
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	11 82       	std	Z+1, r1	; 0x01
 1ea:	10 82       	st	Z, r1
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	24 30       	cpi	r18, 0x04	; 4
 1f2:	31 05       	cpc	r19, r1
 1f4:	a4 f3       	brlt	.-24     	; 0x1de <guardaDigitos+0x4c>

}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <main>:

int main(void)
{
	//Configuração das portas
	DDRD = 0x7f;		//Porta 7D como input e as outras como output
 1fc:	8f e7       	ldi	r24, 0x7F	; 127
 1fe:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		//Valor inicial da port D
 200:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xff;		//Todas as portas de B como output
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;		//PINB0 como 1 (display das unidades)
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	85 b9       	out	0x05, r24	; 5
	
	PCMSK2 |= (1<<PCINT23);		//Habilitando pin change mask na porta int23
 20a:	ed e6       	ldi	r30, 0x6D	; 109
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);		//Habilitando pin change interrupt na pcie2
 214:	e8 e6       	ldi	r30, 0x68	; 104
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	80 83       	st	Z, r24
	
	sei();		//permitindo interrupções globais
 21e:	78 94       	sei
	
    while (1) 
    {
		guardaDigitos(numeroASerExibido);
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 228:	0e 94 c9 00 	call	0x192	; 0x192 <guardaDigitos>
		liga_desliga_display();		
 22c:	0e 94 9c 00 	call	0x138	; 0x138 <liga_desliga_display>
 230:	f7 cf       	rjmp	.-18     	; 0x220 <main+0x24>

00000232 <__divmodhi4>:
 232:	97 fb       	bst	r25, 7
 234:	07 2e       	mov	r0, r23
 236:	16 f4       	brtc	.+4      	; 0x23c <__divmodhi4+0xa>
 238:	00 94       	com	r0
 23a:	07 d0       	rcall	.+14     	; 0x24a <__divmodhi4_neg1>
 23c:	77 fd       	sbrc	r23, 7
 23e:	09 d0       	rcall	.+18     	; 0x252 <__divmodhi4_neg2>
 240:	0e 94 33 01 	call	0x266	; 0x266 <__udivmodhi4>
 244:	07 fc       	sbrc	r0, 7
 246:	05 d0       	rcall	.+10     	; 0x252 <__divmodhi4_neg2>
 248:	3e f4       	brtc	.+14     	; 0x258 <__divmodhi4_exit>

0000024a <__divmodhi4_neg1>:
 24a:	90 95       	com	r25
 24c:	81 95       	neg	r24
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	08 95       	ret

00000252 <__divmodhi4_neg2>:
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255

00000258 <__divmodhi4_exit>:
 258:	08 95       	ret

0000025a <__tablejump2__>:
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	05 90       	lpm	r0, Z+
 260:	f4 91       	lpm	r31, Z
 262:	e0 2d       	mov	r30, r0
 264:	09 94       	ijmp

00000266 <__udivmodhi4>:
 266:	aa 1b       	sub	r26, r26
 268:	bb 1b       	sub	r27, r27
 26a:	51 e1       	ldi	r21, 0x11	; 17
 26c:	07 c0       	rjmp	.+14     	; 0x27c <__udivmodhi4_ep>

0000026e <__udivmodhi4_loop>:
 26e:	aa 1f       	adc	r26, r26
 270:	bb 1f       	adc	r27, r27
 272:	a6 17       	cp	r26, r22
 274:	b7 07       	cpc	r27, r23
 276:	10 f0       	brcs	.+4      	; 0x27c <__udivmodhi4_ep>
 278:	a6 1b       	sub	r26, r22
 27a:	b7 0b       	sbc	r27, r23

0000027c <__udivmodhi4_ep>:
 27c:	88 1f       	adc	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	5a 95       	dec	r21
 282:	a9 f7       	brne	.-22     	; 0x26e <__udivmodhi4_loop>
 284:	80 95       	com	r24
 286:	90 95       	com	r25
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
