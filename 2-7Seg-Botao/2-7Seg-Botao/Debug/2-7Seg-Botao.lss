
2-7Seg-Botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b0  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  0000104f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000180  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 91 00 	call	0x122	; 0x122 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adicionaUnidade>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	31 ee       	ldi	r19, 0xE1	; 225
  84:	94 e0       	ldi	r25, 0x04	; 4
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <adicionaUnidade+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <adicionaUnidade+0x10>
  90:	00 00       	nop
*			  *port: Ponteiro referência da porta do display
*/
void adicionaUnidade(uint8_t valorPorta, volatile uint8_t *port)
{
	_delay_ms(100);
	switch(valorPorta)
  92:	8b 35       	cpi	r24, 0x5B	; 91
  94:	09 f1       	breq	.+66     	; 0xd8 <adicionaUnidade+0x58>
  96:	58 f4       	brcc	.+22     	; 0xae <adicionaUnidade+0x2e>
  98:	87 30       	cpi	r24, 0x07	; 7
  9a:	91 f1       	breq	.+100    	; 0x100 <adicionaUnidade+0x80>
  9c:	18 f4       	brcc	.+6      	; 0xa4 <adicionaUnidade+0x24>
  9e:	86 30       	cpi	r24, 0x06	; 6
  a0:	b9 f0       	breq	.+46     	; 0xd0 <adicionaUnidade+0x50>
  a2:	08 95       	ret
  a4:	8f 33       	cpi	r24, 0x3F	; 63
  a6:	81 f0       	breq	.+32     	; 0xc8 <adicionaUnidade+0x48>
  a8:	8f 34       	cpi	r24, 0x4F	; 79
  aa:	d1 f0       	breq	.+52     	; 0xe0 <adicionaUnidade+0x60>
  ac:	08 95       	ret
  ae:	8d 36       	cpi	r24, 0x6D	; 109
  b0:	f9 f0       	breq	.+62     	; 0xf0 <adicionaUnidade+0x70>
  b2:	28 f4       	brcc	.+10     	; 0xbe <adicionaUnidade+0x3e>
  b4:	86 36       	cpi	r24, 0x66	; 102
  b6:	c1 f0       	breq	.+48     	; 0xe8 <adicionaUnidade+0x68>
  b8:	87 36       	cpi	r24, 0x67	; 103
  ba:	51 f1       	breq	.+84     	; 0x110 <adicionaUnidade+0x90>
  bc:	08 95       	ret
  be:	8d 37       	cpi	r24, 0x7D	; 125
  c0:	d9 f0       	breq	.+54     	; 0xf8 <adicionaUnidade+0x78>
  c2:	8f 37       	cpi	r24, 0x7F	; 127
  c4:	09 f1       	breq	.+66     	; 0x108 <adicionaUnidade+0x88>
  c6:	08 95       	ret
	{
		case ZERO:
			*port = UM;
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	fb 01       	movw	r30, r22
  cc:	80 83       	st	Z, r24
			break;
  ce:	08 95       	ret
		
		case UM:
			*port = DOIS;
  d0:	8b e5       	ldi	r24, 0x5B	; 91
  d2:	fb 01       	movw	r30, r22
  d4:	80 83       	st	Z, r24
			break;
  d6:	08 95       	ret
		
		case DOIS:
			*port = TRES;
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	fb 01       	movw	r30, r22
  dc:	80 83       	st	Z, r24
			break;
  de:	08 95       	ret
		
		case TRES:
			*port = QUATRO;
  e0:	86 e6       	ldi	r24, 0x66	; 102
  e2:	fb 01       	movw	r30, r22
  e4:	80 83       	st	Z, r24
			break;
  e6:	08 95       	ret
		
		case QUATRO:
			*port = CINCO;
  e8:	8d e6       	ldi	r24, 0x6D	; 109
  ea:	fb 01       	movw	r30, r22
  ec:	80 83       	st	Z, r24
			break;
  ee:	08 95       	ret
		
		case CINCO:
			*port = SEIS;
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	fb 01       	movw	r30, r22
  f4:	80 83       	st	Z, r24
			break;
  f6:	08 95       	ret
			
		case SEIS:
			*port = SETE;
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	fb 01       	movw	r30, r22
  fc:	80 83       	st	Z, r24
			break;
  fe:	08 95       	ret
			
		case SETE:
			*port = OITO;
 100:	8f e7       	ldi	r24, 0x7F	; 127
 102:	fb 01       	movw	r30, r22
 104:	80 83       	st	Z, r24
			break;
 106:	08 95       	ret
			
		case OITO:
			*port = NOVE;
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	fb 01       	movw	r30, r22
 10c:	80 83       	st	Z, r24
			break;
 10e:	08 95       	ret
 110:	fb 01       	movw	r30, r22
			
		case NOVE:
			*port = ZERO;
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	80 83       	st	Z, r24
			adicionaUnidade(PORTB, &PORTB);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	65 e2       	ldi	r22, 0x25	; 37
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 40 00 	call	0x80	; 0x80 <adicionaUnidade>
 120:	08 95       	ret

00000122 <main>:
}

int main(void)
{
	//Configuração das portas
	DDRD = 0x7f;		//Todas as portas de D como output e 7D como input
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x3F;		//Todas as portas de D como 0
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff;		//Todas as portas de B como output
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0x3F;		//Todas as portas de B como 0
 12e:	85 b9       	out	0x05, r24	; 5
	
    while (1) 
    {
		if(PIND & (1<<PIND7))
 130:	4f 9b       	sbis	0x09, 7	; 9
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0xe>
		{
			adicionaUnidade(PORTD, &PORTD);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	6b e2       	ldi	r22, 0x2B	; 43
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	0e 94 40 00 	call	0x80	; 0x80 <adicionaUnidade>
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <main+0xe>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
