
2-7Seg-Botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079c  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d5  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000180  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8e:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adicionaUnidade>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	ef e4       	ldi	r30, 0x4F	; 79
  98:	f3 ec       	ldi	r31, 0xC3	; 195
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <adicionaUnidade+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <adicionaUnidade+0xa>
  a0:	00 00       	nop
uint8_t listaNumeros[10] = {ZERO, UM, DOIS, TRES, QUATRO, CINCO, SEIS, SETE, OITO, NOVE};

void adicionaUnidade(uint8_t valorPorta, volatile uint8_t *port)
{
	_delay_ms(200);
	switch(valorPorta)
  a2:	8b 35       	cpi	r24, 0x5B	; 91
  a4:	09 f1       	breq	.+66     	; 0xe8 <adicionaUnidade+0x52>
  a6:	58 f4       	brcc	.+22     	; 0xbe <adicionaUnidade+0x28>
  a8:	87 30       	cpi	r24, 0x07	; 7
  aa:	91 f1       	breq	.+100    	; 0x110 <adicionaUnidade+0x7a>
  ac:	18 f4       	brcc	.+6      	; 0xb4 <adicionaUnidade+0x1e>
  ae:	86 30       	cpi	r24, 0x06	; 6
  b0:	b9 f0       	breq	.+46     	; 0xe0 <adicionaUnidade+0x4a>
  b2:	08 95       	ret
  b4:	8f 33       	cpi	r24, 0x3F	; 63
  b6:	81 f0       	breq	.+32     	; 0xd8 <adicionaUnidade+0x42>
  b8:	8f 34       	cpi	r24, 0x4F	; 79
  ba:	d1 f0       	breq	.+52     	; 0xf0 <adicionaUnidade+0x5a>
  bc:	08 95       	ret
  be:	8d 36       	cpi	r24, 0x6D	; 109
  c0:	f9 f0       	breq	.+62     	; 0x100 <adicionaUnidade+0x6a>
  c2:	28 f4       	brcc	.+10     	; 0xce <adicionaUnidade+0x38>
  c4:	86 36       	cpi	r24, 0x66	; 102
  c6:	c1 f0       	breq	.+48     	; 0xf8 <adicionaUnidade+0x62>
  c8:	87 36       	cpi	r24, 0x67	; 103
  ca:	51 f1       	breq	.+84     	; 0x120 <adicionaUnidade+0x8a>
  cc:	08 95       	ret
  ce:	8d 37       	cpi	r24, 0x7D	; 125
  d0:	d9 f0       	breq	.+54     	; 0x108 <adicionaUnidade+0x72>
  d2:	8f 37       	cpi	r24, 0x7F	; 127
  d4:	09 f1       	breq	.+66     	; 0x118 <adicionaUnidade+0x82>
  d6:	08 95       	ret
	{
		case ZERO:
			*port = UM;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	fb 01       	movw	r30, r22
  dc:	80 83       	st	Z, r24
			break;
  de:	08 95       	ret
		
		case UM:
			*port = DOIS;
  e0:	8b e5       	ldi	r24, 0x5B	; 91
  e2:	fb 01       	movw	r30, r22
  e4:	80 83       	st	Z, r24
			break;
  e6:	08 95       	ret
		
		case DOIS:
			*port = TRES;
  e8:	8f e4       	ldi	r24, 0x4F	; 79
  ea:	fb 01       	movw	r30, r22
  ec:	80 83       	st	Z, r24
			break;
  ee:	08 95       	ret
		
		case TRES:
			*port = QUATRO;
  f0:	86 e6       	ldi	r24, 0x66	; 102
  f2:	fb 01       	movw	r30, r22
  f4:	80 83       	st	Z, r24
			break;
  f6:	08 95       	ret
		
		case QUATRO:
			*port = CINCO;
  f8:	8d e6       	ldi	r24, 0x6D	; 109
  fa:	fb 01       	movw	r30, r22
  fc:	80 83       	st	Z, r24
			break;
  fe:	08 95       	ret
		
		case CINCO:
			*port = SEIS;
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	fb 01       	movw	r30, r22
 104:	80 83       	st	Z, r24
			break;
 106:	08 95       	ret
			
		case SEIS:
			*port = SETE;
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	fb 01       	movw	r30, r22
 10c:	80 83       	st	Z, r24
			break;
 10e:	08 95       	ret
			
		case SETE:
			*port = OITO;
 110:	8f e7       	ldi	r24, 0x7F	; 127
 112:	fb 01       	movw	r30, r22
 114:	80 83       	st	Z, r24
			break;
 116:	08 95       	ret
			
		case OITO:
			*port = NOVE;
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	fb 01       	movw	r30, r22
 11c:	80 83       	st	Z, r24
			break;
 11e:	08 95       	ret
 120:	fb 01       	movw	r30, r22
			
		case NOVE:
			*port = ZERO;
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	80 83       	st	Z, r24
			adicionaUnidade(PORTB, &PORTB);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	65 e2       	ldi	r22, 0x25	; 37
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <adicionaUnidade>
 130:	08 95       	ret

00000132 <main>:
}

int main(void)
{
	//Configuração das portas
	DDRD = 0x7f;		//Todas as portas de D como output e 7D como input
 132:	8f e7       	ldi	r24, 0x7F	; 127
 134:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x3F;		//Todas as portas de D como 0
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	8b b9       	out	0x0b, r24	; 11
		
	DDRB = 0xff;		//Todas as portas de B como output
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0x3F;		//Todas as portas de B como 0
 13e:	85 b9       	out	0x05, r24	; 5
	
	
	
    while (1) 
    {
		if(PIND & (1<<PIND7))
 140:	4f 9b       	sbis	0x09, 7	; 9
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0xe>
		{
			adicionaUnidade(PORTD, &PORTD);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	6b e2       	ldi	r22, 0x2B	; 43
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <adicionaUnidade>
 14e:	f8 cf       	rjmp	.-16     	; 0x140 <main+0xe>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
