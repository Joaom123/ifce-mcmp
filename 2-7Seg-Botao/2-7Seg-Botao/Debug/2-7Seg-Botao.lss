
2-7Seg-Botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000705  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000203  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adicionaUnidade>:
* Parâmetros:	valorPorta: Valor que está exibido no display
*				*port: Ponteiro referência da porta do display
*/
void adicionaUnidade(uint8_t valorPorta, volatile uint8_t *port)
{
	switch(valorPorta)
  80:	8b 35       	cpi	r24, 0x5B	; 91
  82:	09 f1       	breq	.+66     	; 0xc6 <adicionaUnidade+0x46>
  84:	58 f4       	brcc	.+22     	; 0x9c <adicionaUnidade+0x1c>
  86:	87 30       	cpi	r24, 0x07	; 7
  88:	91 f1       	breq	.+100    	; 0xee <adicionaUnidade+0x6e>
  8a:	18 f4       	brcc	.+6      	; 0x92 <adicionaUnidade+0x12>
  8c:	86 30       	cpi	r24, 0x06	; 6
  8e:	b9 f0       	breq	.+46     	; 0xbe <adicionaUnidade+0x3e>
  90:	08 95       	ret
  92:	8f 33       	cpi	r24, 0x3F	; 63
  94:	81 f0       	breq	.+32     	; 0xb6 <adicionaUnidade+0x36>
  96:	8f 34       	cpi	r24, 0x4F	; 79
  98:	d1 f0       	breq	.+52     	; 0xce <adicionaUnidade+0x4e>
  9a:	08 95       	ret
  9c:	8d 36       	cpi	r24, 0x6D	; 109
  9e:	f9 f0       	breq	.+62     	; 0xde <adicionaUnidade+0x5e>
  a0:	28 f4       	brcc	.+10     	; 0xac <adicionaUnidade+0x2c>
  a2:	86 36       	cpi	r24, 0x66	; 102
  a4:	c1 f0       	breq	.+48     	; 0xd6 <adicionaUnidade+0x56>
  a6:	87 36       	cpi	r24, 0x67	; 103
  a8:	51 f1       	breq	.+84     	; 0xfe <adicionaUnidade+0x7e>
  aa:	08 95       	ret
  ac:	8d 37       	cpi	r24, 0x7D	; 125
  ae:	d9 f0       	breq	.+54     	; 0xe6 <adicionaUnidade+0x66>
  b0:	8f 37       	cpi	r24, 0x7F	; 127
  b2:	09 f1       	breq	.+66     	; 0xf6 <adicionaUnidade+0x76>
  b4:	08 95       	ret
	{
		case ZERO:
			*port = UM;
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	fb 01       	movw	r30, r22
  ba:	80 83       	st	Z, r24
			break;
  bc:	08 95       	ret
		case UM:
			*port = DOIS;
  be:	8b e5       	ldi	r24, 0x5B	; 91
  c0:	fb 01       	movw	r30, r22
  c2:	80 83       	st	Z, r24
			break;
  c4:	08 95       	ret
		case DOIS:
			*port = TRES;
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	fb 01       	movw	r30, r22
  ca:	80 83       	st	Z, r24
			break;
  cc:	08 95       	ret
		case TRES:
			*port = QUATRO;
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	fb 01       	movw	r30, r22
  d2:	80 83       	st	Z, r24
			break;
  d4:	08 95       	ret
		case QUATRO:
			*port = CINCO;
  d6:	8d e6       	ldi	r24, 0x6D	; 109
  d8:	fb 01       	movw	r30, r22
  da:	80 83       	st	Z, r24
			break;
  dc:	08 95       	ret
		case CINCO:
			*port = SEIS;
  de:	8d e7       	ldi	r24, 0x7D	; 125
  e0:	fb 01       	movw	r30, r22
  e2:	80 83       	st	Z, r24
			break;
  e4:	08 95       	ret
		case SEIS:
			*port = SETE;
  e6:	87 e0       	ldi	r24, 0x07	; 7
  e8:	fb 01       	movw	r30, r22
  ea:	80 83       	st	Z, r24
			break;
  ec:	08 95       	ret
		case SETE:
			*port = OITO;
  ee:	8f e7       	ldi	r24, 0x7F	; 127
  f0:	fb 01       	movw	r30, r22
  f2:	80 83       	st	Z, r24
			break;
  f4:	08 95       	ret
		case OITO:
			*port = NOVE;
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	fb 01       	movw	r30, r22
  fa:	80 83       	st	Z, r24
			break;
  fc:	08 95       	ret
		case NOVE:
			*port = ZERO;
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	fb 01       	movw	r30, r22
 102:	80 83       	st	Z, r24
			if(port == &PORTD)adicionaUnidade(PORTB, &PORTB);
 104:	6b 32       	cpi	r22, 0x2B	; 43
 106:	71 05       	cpc	r23, r1
 108:	29 f4       	brne	.+10     	; 0x114 <adicionaUnidade+0x94>
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	65 e2       	ldi	r22, 0x25	; 37
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 40 00 	call	0x80	; 0x80 <adicionaUnidade>
 114:	08 95       	ret

00000116 <__vector_5>:

/*
*
*/
ISR(PCINT2_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	if (BOTAO_ATIVADO)
 138:	4f 9b       	sbis	0x09, 7	; 9
 13a:	05 c0       	rjmp	.+10     	; 0x146 <__vector_5+0x30>
	{
		adicionaUnidade(PORTD, &PORTD);
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	6b e2       	ldi	r22, 0x2B	; 43
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 40 00 	call	0x80	; 0x80 <adicionaUnidade>
	}
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:

int main(void)
{
	//Configuração das portas
	DDRD = 0x7f;		//Todas as portas de D como output e 7D como input
 168:	8f e7       	ldi	r24, 0x7F	; 127
 16a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x3F;		//Todas as portas de D como 0
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff;		//Todas as portas de B como output
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	94 b9       	out	0x04, r25	; 4
	PORTB = 0x3F;		//Todas as portas de B como 0
 174:	85 b9       	out	0x05, r24	; 5
	
	PCMSK2 |= (1<<PCINT23);
 176:	ed e6       	ldi	r30, 0x6D	; 109
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);
 180:	e8 e6       	ldi	r30, 0x68	; 104
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
	
	sei();
 18a:	78 94       	sei
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x24>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
