
interface-serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d0  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041a  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000351  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_1>
   8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enviaDado>:
#define BAUD 4800
#define BRC ((F_CPU/16/BAUD)-1)

void enviaDado(char dado)
{
	PORTB = dado;
  90:	85 b9       	out	0x05, r24	; 5
	PORTC |= (0x01);
  92:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(0x02);
  94:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
  96:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <enviaDado+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <enviaDado+0x12>
  a2:	00 00       	nop
	_delay_ms(20);
	PORTC &= ~(0x04);	
  a4:	42 98       	cbi	0x08, 2	; 8
  a6:	08 95       	ret

000000a8 <enviaComando>:
}

void enviaComando(char comando)
{
	PORTB = comando;
  a8:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(0x01);
  aa:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(0x02);
  ac:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
  ae:	42 9a       	sbi	0x08, 2	; 8
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <enviaComando+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <enviaComando+0x12>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC &= ~(0x04);
  bc:	42 98       	cbi	0x08, 2	; 8
  be:	08 95       	ret

000000c0 <inicializa>:
}

void inicializa()
{
	enviaComando(0x38);
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x0E);
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x06);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x01);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
  d8:	08 95       	ret

000000da <USART_init>:
}

void USART_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  f2:	e2 ec       	ldi	r30, 0xC2	; 194
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <__vector_18>:
}

volatile char byteRecebido;

ISR(USART_RX_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	byteRecebido = UDR0;
 120:	e6 ec       	ldi	r30, 0xC6	; 198
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	UDR0 = byteRecebido;
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12e:	80 83       	st	Z, r24
	enviaDado(byteRecebido);
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_1>:

ISR(INT0_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	enviaDado('A');
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_2>:

ISR(INT1_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	enviaDado('B');
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <main>:

int main(void)
{
	DDRD = 0x00;
 1ee:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0c;
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	8b b9       	out	0x0b, r24	; 11
	USART_init(BRC);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 6d 00 	call	0xda	; 0xda <USART_init>
	DDRB = 0xff;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;
 200:	97 e0       	ldi	r25, 0x07	; 7
 202:	97 b9       	out	0x07, r25	; 7
	PORTB = 0xff;
 204:	85 b9       	out	0x05, r24	; 5
	
	EICRA |= (1 << ISC01);
 206:	e9 e6       	ldi	r30, 0x69	; 105
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0)|(1 << INT1);
 210:	8d b3       	in	r24, 0x1d	; 29
 212:	83 60       	ori	r24, 0x03	; 3
 214:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 216:	78 94       	sei
	inicializa();
 218:	0e 94 60 00 	call	0xc0	; 0xc0 <inicializa>
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x2e>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
