
interface-serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000909  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000343  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enviaDado>:
{
	for (int i = 0; i < strlen(mensagem); i++)
	{
		enviaDado(mensagem[i]);
	}
}
  90:	85 b9       	out	0x05, r24	; 5
  92:	40 9a       	sbi	0x08, 0	; 8
  94:	41 98       	cbi	0x08, 1	; 8
  96:	42 9a       	sbi	0x08, 2	; 8
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <enviaDado+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <enviaDado+0x12>
  a2:	00 00       	nop
  a4:	42 98       	cbi	0x08, 2	; 8
  a6:	08 95       	ret

000000a8 <enviaComando>:

void enviaComando(char comando)
{
	PORTB = comando;
  a8:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(0x01);
  aa:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(0x02);
  ac:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
  ae:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <enviaComando+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <enviaComando+0x12>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC &= ~(0x04);
  bc:	42 98       	cbi	0x08, 2	; 8
  be:	08 95       	ret

000000c0 <inicializa>:
}

void inicializa()
{
	enviaComando(0x38);
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x0E);
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x06);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
	enviaComando(0x01);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <enviaComando>
  d8:	08 95       	ret

000000da <USART_init>:
}

void USART_init(unsigned int ubrr)
{	
	UBRR0H = (unsigned char)(ubrr>>8);
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  e2:	e1 ec       	ldi	r30, 0xC1	; 193
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  f2:	e2 ec       	ldi	r30, 0xC2	; 194
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <__vector_18>:
}

volatile char byteRecebido;

ISR(USART_RX_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	byteRecebido = UDR0;
 120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//UDR0 = byteRecebido;
	enviaDado(byteRecebido);
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_5>:

ISR(PCINT2_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	//enviaDado('A');
	if(BOTAO_ATIVADOA) enviaDado('A');
 174:	4a 99       	sbic	0x09, 2	; 9
 176:	03 c0       	rjmp	.+6      	; 0x17e <__vector_5+0x2c>
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
	if(BOTAO_ATIVADOB) enviaDado('B');
 17e:	4b 99       	sbic	0x09, 3	; 9
 180:	03 c0       	rjmp	.+6      	; 0x188 <__vector_5+0x36>
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 48 00 	call	0x90	; 0x90 <enviaDado>
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <main>:

int main(void)
{
	DDRD = 0x00;
 1aa:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0c;
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	8b b9       	out	0x0b, r24	; 11
	USART_init(BRC);
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 6d 00 	call	0xda	; 0xda <USART_init>
	DDRB = 0xff;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;
 1bc:	97 e0       	ldi	r25, 0x07	; 7
 1be:	97 b9       	out	0x07, r25	; 7
	PORTB = 0xff;
 1c0:	85 b9       	out	0x05, r24	; 5
	PCMSK2 |= (1<<PCINT18);
 1c2:	ed e6       	ldi	r30, 0x6D	; 109
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT19);
 1cc:	80 81       	ld	r24, Z
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);
 1d2:	e8 e6       	ldi	r30, 0x68	; 104
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	80 83       	st	Z, r24
	sei();
 1dc:	78 94       	sei
	inicializa();
 1de:	0e 94 60 00 	call	0xc0	; 0xc0 <inicializa>
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <main+0x38>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
